datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String          @id @default(uuid())
  email                  String          @unique
  username               String          @unique
  password               String
  points                 Int             @default(0)
  profilePic             String?
  victories             Int             @default(0)
  defeats               Int             @default(0)
  createdAt              DateTime        @default(now())
  sessionsAsPlayerOne    MatchmakingSession[] @relation("PlayerOneSessions")
  sessionsAsPlayerTwo    MatchmakingSession[] @relation("PlayerTwoSessions")
  friendRequestsSent     FriendRequest[] @relation("SentRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedRequests")
  follows                Follows[]       @relation("FollowedUser")
  followedBy             Follows[]       @relation("FollowingUser")
  sessions               Session[]
}

model MatchmakingSession {
  id   String      @id
  playerOneId   String
  playerOne     User        @relation("PlayerOneSessions", fields: [playerOneId], references: [id])
  playerTwoId   String?
  playerTwo     User?       @relation("PlayerTwoSessions", fields: [playerTwoId], references: [id])
  winnerId      String?
  playerOneScore Int         @default(0)
  playerTwoScore Int         @default(0)
  status        GameStatus  @default(PENDING)
  createdAt     DateTime    @default(now())
  questions     Question[]  @relation("SessionQuestions")
}


model Question {
  id               String    @id @default(uuid()) 
  text             String    
  correctAnswerId  String?   
  correctAnswer    Choice?   @relation("CorrectAnswer", fields: [correctAnswerId], references: [id])
  choices          Choice[]  @relation("QuestionChoices")
  sessions        MatchmakingSession[] @relation("SessionQuestions")
}

model Choice {
  id         String   @id @default(uuid()) 
  text       String  
  questionId String  
  question   Question @relation("QuestionChoices", fields: [questionId], references: [id]) 
  isCorrect  Boolean 

  Question Question[] @relation("CorrectAnswer")
}

model Follows {
  id                String         @id @default(uuid())
  followingUserId   String
  followedUserId    String
  status            RequestStatus   @default(PENDING)
  createdAt         DateTime       @default(now())
  followingUser     User           @relation("FollowingUser", fields: [followingUserId], references: [id])
  followedUser      User           @relation("FollowedUser", fields: [followedUserId], references: [id])
  
}

model FriendRequest {
  id            String         @id @default(uuid())
  senderId      String
  sender        User           @relation("SentRequests", fields: [senderId], references: [id])
  receiverId    String
  receiver      User           @relation("ReceivedRequests", fields: [receiverId], references: [id])
  status        RequestStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
